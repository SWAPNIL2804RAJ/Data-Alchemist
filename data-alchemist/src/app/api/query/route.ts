import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY!,
  baseURL: 'https://openrouter.ai/api/v1',
  defaultHeaders: {
    'HTTP-Referer': 'http://localhost:3000/', // Update if deployed
    'User-Agent': 'data-alchemist (http://localhost:3000)', // Update if deployed
  },
});

export async function POST(req: NextRequest) {
  try {
    const { query, data } = await req.json();

    const response = await openai.chat.completions.create({
      model: 'mistralai/mistral-7b-instruct',
      messages: [
        {
          role: 'system',
          content:
            'You are a helpful assistant that generates ONLY JavaScript filtering expressions (no explanation). Return ONLY the code to be used inside Array.filter like: item => item.PriorityLevel === "1". No code block, no explanation, just JS expression.',
        },
        {
          role: 'user',
          content: `Here is a sample of the data:\n${JSON.stringify(data.slice(0, 3), null, 2)}\n\nQuery: ${query}`,
        },
      ],
      temperature: 0.2,
    });

    let code = response.choices[0].message.content?.trim();
    console.log('📝 Raw AI Code Response:', code);

    // 1. Remove code block (```javascript ... ```)
    if (code?.includes('```')) {
      const match = code.match(/```(?:javascript)?\n?([^`]+)```/);
      code = match?.[1]?.trim();
    }

    // 2. Extract from full filter function: data.filter(...)
    if (code?.includes('data.filter')) {
      const match = code.match(/data\.filter\s*\(\s*(.*)\s*\)/);
      code = match?.[1]?.trim();
    }

    // 3. Remove leading arrow function if present: item => ...
    if (code?.startsWith('item =>')) {
      code = code.replace(/^item\s*=>\s*/, '');
    }

    if (!code) {
      return NextResponse.json({ error: 'No valid code extracted from AI response.' }, { status: 400 });
    }

    console.log('✅ Final Cleaned Code:', code);

    let filtered;
    try {
      filtered = eval(`(() => {
        const data = ${JSON.stringify(data)};
        return data.filter(item => ${code});
      })()`);
    } catch (err) {
      console.error('⚠️ Error evaluating generated code:', err);
      return NextResponse.json({ error: 'Invalid code generated by AI.' }, { status: 500 });
    }

    console.log('📊 Filtered Clients:', filtered);
    return NextResponse.json({ filtered });
  } catch (error: any) {
    console.error('❌ AI Filter Error:', error);
    return NextResponse.json({ error: 'AI filtering failed. Please try again.' }, { status: 500 });
  }
}
